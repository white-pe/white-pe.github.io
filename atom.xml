<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>white-pe的博客</title>
  
  <subtitle>to code everyday</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-22T04:04:50.540Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>White-pe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>链表操作</title>
    <link href="http://example.com/2021/12/22/%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/12/22/%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2021-12-22T03:58:09.000Z</published>
    <updated>2021-12-22T04:04:50.540Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关于链表的一些基本操作</strong></p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Link</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Link</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;link;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建链表的函数</span></span><br><span class="line"><span class="function">link *<span class="title">CreatList</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    link *p=(link*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(link));</span><br><span class="line">    link *temp=p;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">int</span> d;</span><br><span class="line">        cin&gt;&gt;d;</span><br><span class="line">        link *a=(link*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(link));</span><br><span class="line">        a-&gt;data=d;</span><br><span class="line">        a-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        temp-&gt;next=a;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表的插入操作,data表示插入的数据,po插入的位置 </span></span><br><span class="line"><span class="function">link *<span class="title">insertElem</span><span class="params">(link *p, <span class="keyword">int</span> data, <span class="keyword">int</span> po)</span> </span>&#123;</span><br><span class="line">    link *temp=p;</span><br><span class="line">    link *q=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;po;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (temp==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;位置无效！！&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    q=(link*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(link));</span><br><span class="line">    q-&gt;data=data;</span><br><span class="line">    q-&gt;next=temp-&gt;next;</span><br><span class="line">    temp-&gt;next=q;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除元素data</span></span><br><span class="line"><span class="function">link *<span class="title">deldata</span><span class="params">(link *p,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    link *temp=p;</span><br><span class="line">    link *del=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;data;i++)&#123;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    del=temp-&gt;next;</span><br><span class="line">    temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(del);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找链表中的元素 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectData</span><span class="params">(link *p,<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    link *t=p;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t-&gt;next) &#123;</span><br><span class="line">        t = t-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;data==data) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表的转置 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReversList</span><span class="params">(link *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    link *h=p-&gt;next,*q;</span><br><span class="line">    p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (h!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        q = h;</span><br><span class="line">        h = h-&gt;next;</span><br><span class="line">        q-&gt;next=p-&gt;next;</span><br><span class="line">        p-&gt;next=q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改元素 </span></span><br><span class="line"><span class="function">link *<span class="title">updata</span><span class="params">(link *p,<span class="keyword">int</span> data, <span class="keyword">int</span> newdata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    link *temp=p;</span><br><span class="line">    temp=temp-&gt;next;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;data;i++) &#123;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;data=newdata;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出链表 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintLink</span><span class="params">(link *p)</span></span>&#123;</span><br><span class="line">    link *temp = p;</span><br><span class="line">    <span class="keyword">while</span>(temp-&gt;next)&#123;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">        cout&lt;&lt;temp-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">link *p=<span class="literal">NULL</span>;</span><br><span class="line">p=<span class="built_in">CreatList</span>(n);</span><br><span class="line"><span class="built_in">ReversList</span>(p);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;转置后链表&quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="built_in">PrintLink</span>(p);</span><br><span class="line">p=<span class="built_in">insertElem</span>(p,<span class="number">9</span>,<span class="number">4</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;插入元素后的链表&quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="built_in">PrintLink</span>(p);</span><br><span class="line">p=<span class="built_in">deldata</span>(p,<span class="number">3</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;删除元素后的链表&quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="built_in">PrintLink</span>(p);</span><br><span class="line">p=<span class="built_in">updata</span>(p,<span class="number">3</span>,<span class="number">10</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;更新元素后链表&quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="built_in">PrintLink</span>(p);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;查找元素的位置&quot;</span>&lt;&lt;endl;</span><br><span class="line">q=<span class="built_in">selectData</span>(p,<span class="number">4</span>);</span><br><span class="line">cout&lt;&lt;q&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;关于链表的一些基本操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>EMQ在Windows环境下安装</title>
    <link href="http://example.com/2021/12/07/EMQ%E5%9C%A8Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2021/12/07/EMQ%E5%9C%A8Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85/</id>
    <published>2021-12-07T07:15:20.000Z</published>
    <updated>2021-12-07T07:18:14.007Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在Windows环境下安装EMQ</strong></p><p><strong>在官网上下载 EMQ 的压缩包，找到Windows相关的包</strong> </p><p><strong>emqx-windows-4.3.8.zip</strong><br>  <strong>An Open-Source, Cloud-Native, Distributed MQTT Broker | EMQ X</strong></p><p><strong>解压后在终端输入命令</strong> </p><p><img src="https://img-blog.csdnimg.cn/e5fd7963e4184a478818f5f80c251b3a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARMKy77ydTzI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>安装成功后</strong></p><p><strong>输入 emqx start此时终端没有反应　在终端输入<a href="http://localhost:18083/">http://localhost:18083/</a>　后进入登陆界面。</strong></p><p><strong>账号：admin</strong></p><p><strong>密码：public</strong></p><p><strong>若遇到一些错误，请以管理员的身份运行终端！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;在Windows环境下安装EMQ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在官网上下载 EMQ 的压缩包，找到Windows相关的包&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;emqx-windows-4.3.8.zip&lt;/strong&gt;&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>binary tree</title>
    <link href="http://example.com/2021/12/07/binary-tree/"/>
    <id>http://example.com/2021/12/07/binary-tree/</id>
    <published>2021-12-07T07:10:07.000Z</published>
    <updated>2021-12-07T07:13:52.896Z</updated>
    
    <content type="html"><![CDATA[<p><strong>要求：</strong></p><ol><li><strong>创建二叉树（10分）</strong></li><li><strong>对二叉树进行中序遍历（10分）</strong></li><li><strong>对二叉树进行前序遍历（10分）</strong></li><li><strong>对二叉树进行后序遍历（10分）</strong></li><li><strong>求二叉树的高度（15分）</strong></li><li><strong>求二叉树中总结点个数（15分）</strong></li><li><strong>复制二叉树（15分）</strong></li><li><strong>编写main函数，调用以上函数进行调试输出（15分）</strong>  </li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> Treelayer = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//输入-1表示该节点为空 </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tree</span>&#123;</span></span><br><span class="line"> <span class="keyword">int</span> data;<span class="comment">//存放数据域</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> *<span class="title">left</span>;</span><span class="comment">//遍历左子树指针</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> *<span class="title">right</span>;</span><span class="comment">//遍历右子树指针</span></span><br><span class="line">&#125;Tree,*BitTree;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//创建二叉树 </span></span><br><span class="line"><span class="function">BitTree <span class="title">CreateTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">BitTree T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data);</span><br><span class="line"><span class="keyword">if</span>(data == <span class="number">-1</span>)&#123;<span class="comment">//输入-1 代表此节点下子树不存数据，也就是不继续递归创建</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//开始创建树的结构 </span></span><br><span class="line">T = (BitTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">T-&gt;data = data;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建%d的左子树:&quot;</span>,data);</span><br><span class="line">T-&gt;left = CreateTree();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建%d的右子树:&quot;</span>,data);</span><br><span class="line">T-&gt;right = CreateTree();</span><br><span class="line"><span class="keyword">return</span> T;<span class="comment">//返回根节点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Preorder</span><span class="params">(BitTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>)<span class="comment">//递归中遇到NULL，返回上一层节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,T-&gt;data);</span><br><span class="line">Preorder(T-&gt;left);</span><br><span class="line">Preorder(T-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inorder</span><span class="params">(BitTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>)<span class="comment">//递归中遇到NULL，返回上一层节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Inorder(T-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,T-&gt;data);</span><br><span class="line">Inorder(T-&gt;right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Postorder</span><span class="params">(BitTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>)<span class="comment">//递归中遇到NULL，返回上一层节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Postorder(T-&gt;left);</span><br><span class="line">Postorder(T-&gt;right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Treeheight</span><span class="params">(BitTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//计算左子树和右子树的高度</span></span><br><span class="line"><span class="keyword">int</span> Lheight = Treeheight(T-&gt;left);</span><br><span class="line"><span class="keyword">int</span> Rheight = Treeheight(T-&gt;right);</span><br><span class="line"><span class="keyword">if</span>(Lheight &gt; Rheight)</span><br><span class="line"><span class="keyword">return</span>(Lheight+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>(Rheight+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//求二叉树的总结点数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Treenode</span><span class="params">(BitTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//计算左右子树的节点 </span></span><br><span class="line"><span class="keyword">int</span> Lnode = Treenode(T-&gt;left);</span><br><span class="line"><span class="keyword">int</span> Rnode = Treenode(T-&gt;right);</span><br><span class="line"><span class="keyword">return</span> Lnode+Rnode+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//复制二叉树</span></span><br><span class="line"><span class="function">BitTree <span class="title">Copytree</span><span class="params">(BitTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BitTree newTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建复制的二叉树 </span></span><br><span class="line">newTree = (BitTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">newTree-&gt;data = T-&gt;data;</span><br><span class="line">newTree-&gt;left = Copytree(T-&gt;left);</span><br><span class="line">newTree-&gt;right = Copytree(T-&gt;right);</span><br><span class="line"><span class="keyword">return</span> newTree;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BitTree S;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数的根节点数据:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">S = CreateTree();<span class="comment">//接受创建二叉树完成的根节点</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;先序遍历结果: \n&quot;</span>);</span><br><span class="line">Preorder(S);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n中序遍历结果: \n&quot;</span>);</span><br><span class="line">Inorder(S);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n后序遍历结果: \n&quot;</span>);</span><br><span class="line">Postorder(S);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出树的层数 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n树的层数:%d\n&quot;</span>,Treeheight(S));</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出树的节点个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;树的节点数:%d\n&quot;</span>,Treenode(S));</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出复制的树</span></span><br><span class="line">BitTree Copy = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;复制的二叉树中序遍历结果\n&quot;</span>);</span><br><span class="line">Copy = Copytree(S);</span><br><span class="line">Inorder(Copy); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;创建二叉树（10分）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对二叉树进行中序遍历（10分）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对二叉树进行前序遍历（10分）&lt;</summary>
      
    
    
    
    
    <category term="二叉树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/12/05/hello-world/"/>
    <id>http://example.com/2021/12/05/hello-world/</id>
    <published>2021-12-05T08:21:27.703Z</published>
    <updated>2021-12-06T05:41:38.215Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
